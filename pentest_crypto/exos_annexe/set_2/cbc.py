# coding: utf-8

import sys
import base64
from Crypto.Cipher import AES

def e(x, k, iv):
	cipher = AES.new(k, AES.MODE_ECB)
	y = b""
	prev_block = iv

	pad = AES.block_size - len(x) % AES.block_size
	x += bytes([pad] * pad)
	
	for i in range(0, len(x), AES.block_size):
		x_block = x[i:i + AES.block_size]
		xored = bytes(x ^ y for x, y in zip(x_block, prev_block))
		y_block = cipher.encrypt(xored)
		y += y_block
		prev_block = y_block
	return y

def CBC(file_path, k, iv):
	k = bytes(k, 'utf-8')
	iv = bytes(int(iv))
	iv = iv * AES.block_size
	
	with open(file_path, "r") as f:
		b64_x = f.read().strip()
	
	x = base64.b64decode(b64_x)
	y = e(x, k, iv)
	y = base64.b64encode(y).decode('utf-8')
	print(y)

def main(nb):
	match nb:
		case "1": CBC(sys.argv[2], sys.argv[3], sys.argv[4])

if __name__ == "__main__":
	main(sys.argv[1])
