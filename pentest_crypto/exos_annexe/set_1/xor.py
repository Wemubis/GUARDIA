# coding: utf-8

import sys
from binascii import unhexlify

def xor_cipher_hex(x, k):
	y = ""
	bin_x = int(x, 16)
	bin_k = int(k, 16)
	bin_str1 = ""
	while bin_x > 0:
		bin_str1 = str(bin_x % 2) + bin_str1
		bin_x = bin_x >> 1
	bin_str2 = ""
	while bin_k > 0:
		bin_str2 = str(bin_k % 2) + bin_str2
		bin_k = bin_k >> 1
	bin_str = int(bin_str1,2) ^ int(bin_str2,2)
	y = str(hex(bin_str))
	print(f'Ciphertext: {y}')

def xor_decipher_hex(y_hex):
	y = []
	for i in range(0, len(y_hex), 2):
		byte = int(y_hex[i:i+2], 16)
		y.append(byte)

	for k in range(256):
		x = ""
		for byte in y:
			decrypted_byte = byte ^ k
			if 32 <= decrypted_byte <= 126:
				x += chr(decrypted_byte)
			else:
				break
		else:
			print(f"Key: {k} -> Plaintext: {x}")

def score_text(text):
	frequency = {
		'a': 8.34, 'b': 1.54, 'c': 2.73, 'd': 4.14, 'e': 12.60,
		'f': 2.03, 'g': 1.92, 'h': 6.11, 'i': 6.71, 'j': 0.23,
		'k': 0.87, 'l': 4.24, 'm': 2.53, 'n': 6.80, 'o': 7.70,
		'p': 1.66, 'q': 0.09, 'r': 5.68, 's': 6.11, 't': 9.37,
		'u': 2.85, 'v': 1.06, 'w': 2.34, 'x': 0.20, 'y': 2.04,
		'z': 0.06, ' ': 13.00,
	}
	return sum(frequency.get(chr(byte), 0) for byte in text.lower())

def xor_decipher_file(file):
	with open("file.txt", "r") as file:
		lines = file.read().strip().split("\n")
	
	best_score = 0
	best_result = None
	
	for y in lines:
		y_bytes = unhexlify(y)
		for k in range(256):
			decrypted = bytes([b ^ k for b in y_bytes])
			score = score_text(decrypted)
			if score > best_score:
				best_score = score
				best_result = (decrypted, k, y)

	print(f'Key: {best_result[1]}')
	print(f'Hexa: {best_result[2]}')
	print(f'Best: {best_result[0].decode(errors='ignore')}')

def xor_repeating_key_cipher(x, k):
	x = x.encode("utf-8")
	k = k.encode("utf-8")
	len_k = len(k)
	y = bytearray()
	for i in range(len(x)):
		char_k = k[i % len_k]
		y.append(x[i] ^ char_k)
	print(f"Key: {k} -> Ciphertext: {y.hex()}")

def main(nb):
	match nb:
		case "1": xor_cipher_hex(sys.argv[2], sys.argv[3])
		case "2": xor_decipher_hex(sys.argv[2])
		case "3": xor_decipher_file(sys.argv[2])
		case "4": xor_repeating_key_cipher(sys.argv[2], sys.argv[3])

if __name__ == "__main__":
	main(sys.argv[1])
